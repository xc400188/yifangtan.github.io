<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一方潭</title>
  
  
  <link href="https://www.yifangtan.com/atom.xml" rel="self"/>
  
  <link href="https://www.yifangtan.com/"/>
  <updated>2021-10-31T09:11:02.548Z</updated>
  <id>https://www.yifangtan.com/</id>
  
  <author>
    <name>半坡上。</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语语法总结</title>
    <link href="https://www.yifangtan.com/posts/45784.html"/>
    <id>https://www.yifangtan.com/posts/45784.html</id>
    <published>2021-10-31T09:00:34.000Z</published>
    <updated>2021-10-31T09:11:02.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/10/e3723703092ea86f.png"></p><p>图片url: <a href="https://gitee.com/yft66/picture/raw/master/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93.png">https://gitee.com/yft66/picture/raw/master/英语语法总结.png</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.bmp.ovh/imgs/2021/10/e3723703092ea86f.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片url: &lt;a href=&quot;https://gitee.com/yft66/picture/raw/master/%E8%8B</summary>
      
    
    
    
    <category term="英语语法" scheme="https://www.yifangtan.com/categories/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="English" scheme="https://www.yifangtan.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>十大排序(一)</title>
    <link href="https://www.yifangtan.com/posts/34436.html"/>
    <id>https://www.yifangtan.com/posts/34436.html</id>
    <published>2021-10-31T08:48:27.000Z</published>
    <updated>2021-10-31T09:14:48.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本程序演示 冒泡排序 */</span><span class="token comment" spellcheck="true">/*是否稳定？ 稳定！*/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入十个数值:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个："</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排列之前的顺序为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>length<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>length<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//比较n-1轮  取两数相互排序依次递进 0-（n-1）,</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token operator">-</span>j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//每轮比较n-1-i次,  </span>        <span class="token punctuation">{</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从小到大</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后的结果为\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>len<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><strong>选择排序</strong></h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本程序演示 选择排序  */</span><span class="token comment" spellcheck="true">/* 是否稳定？ */</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请您输入排列的数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环向数组中存入数</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排列之前的顺序为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>length<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>length<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 取一数当最小 每轮进行比较 较小者置换；互换于前列！</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> T <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 比较置换过程！</span>        a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后的值为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本程序演示 快速排序（冒泡排序的改进） */</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后的值为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getStandard</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基准数据</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为默认基准是从左边开始，所以从右边开始比较</span>        <span class="token comment" spellcheck="true">// 当队尾的元素大于等于基准数据 时,就一直向前挪动 j 指针</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当找到比 a[i] 小的时，就把后面的值 a[j] 赋给它</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当队首元素小于等于基准数据 时,就一直向后挪动 i 指针</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当找到比 a[j] 大的时，就把前面的值 a[i] 赋给它</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 跳出循环时 i 和 j 相等,此时的 i 或 j 就是 key 的正确索引位置</span>    <span class="token comment" spellcheck="true">// 把基准数据赋给正确位置</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开始默认基准为 low</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分段位置下标</span>        <span class="token keyword">int</span> standard <span class="token operator">=</span> <span class="token function">getStandard</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归调用排序</span>        <span class="token comment" spellcheck="true">// 左边排序</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> standard <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 右边排序</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> standard <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请您输入排列的十位数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环向数组中存入数</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排列之前的顺序为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>length<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>length<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><strong>希尔排序</strong></h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本程序演示 希尔排序(缩小增量排序)  */</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请您输入排列的数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环向数组中存入数</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排列之前的顺序为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>length<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>length<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 假定一个区间ii; 将数组割分为k个区间ii；每个区间内排序;不断缩小区间ii--;</span>    <span class="token keyword">int</span> ii <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增量为整数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ii<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ii<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> i<span class="token operator">-</span>ii<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>m<span class="token operator">+</span>ii<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>                m <span class="token operator">=</span> m <span class="token operator">-</span> ii<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//置换 1、</span>            <span class="token punctuation">}</span>            a<span class="token punctuation">[</span>m<span class="token operator">+</span>ii<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 置换 2、</span>        <span class="token punctuation">}</span>        ii <span class="token operator">=</span> ii<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直至增量为零！</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后的值为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><strong>插入排序</strong></h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本程序演示 插入排序 （直接插入排序）*/</span><span class="token comment" spellcheck="true">/*是否稳定？ 稳定！*/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请您输入排列的数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环向数组中存入数</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排列之前的顺序为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>length<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>length<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//取一个数在数组中检索 到相应位置 插入，其后的数相应后移</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> dex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> a<span class="token punctuation">[</span>dex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>dex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>dex<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>dex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>dex<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 其后的数相应后移！</span>            dex<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 元素前移</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>dex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 元素前移</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后的值为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;&lt;/h2&gt;&lt;pre class=&quot; language-c&quot;&gt;&lt;code class=&quot;language-c</summary>
      
    
    
    
    <category term="十大排序" scheme="https://www.yifangtan.com/categories/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="十大排序·" scheme="https://www.yifangtan.com/tags/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%C2%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java知识梳理（一）</title>
    <link href="https://www.yifangtan.com/posts/6436.html"/>
    <id>https://www.yifangtan.com/posts/6436.html</id>
    <published>2021-10-31T06:29:04.000Z</published>
    <updated>2021-10-31T09:14:20.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h2><p>​    java语言有八大基本数据类型；</p><p>​    <code>逻辑类型：boolean;整数类型：byte、short、int、long;字符类型：char;浮点类型：float、double;</code></p><p>​    <img src="https://gitee.com/yft66/picture/raw/master/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><h3 id="占用空间"><a href="#占用空间" class="headerlink" title="占用空间"></a>占用空间</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte[字节]</td><td>1字节</td><td>-128~127</td></tr><tr><td>short[短整型]</td><td>2字节</td><td>-($$ 2^{15} $$)~$$2^{15}$$-1;  -32768 ~32767</td></tr><tr><td>int[整型]</td><td>4字节</td><td>-($$2^{31}$$)~$$2^{31}$$-1 ; -2147483648-2147483647</td></tr><tr><td>long[长整型]</td><td>8字节</td><td>-($$2^{63}$$)~$$2^{63}$$-1</td></tr><tr><td>单精度 float</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>双精度 double</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="字符型char"><a href="#字符型char" class="headerlink" title="字符型char"></a>字符型char</h4><p>​        1，字符长量以单引号‘ ’括起;</p><p>​        2、java允许使用转义字符 ‘' 来将后面的字符转换为特殊字符型变量;</p><p>​        3、java中，char的本质是一个整数，输出时，是unicode码对应的字符;</p><p>​        4、java 中的char型数据一定是无符号的。不允许用 unsigned 来修饰声明的char型变量；</p><p>​        5、char类型可以进行运算;</p><h4 id="浮点型单精度-float-和双精度-double"><a href="#浮点型单精度-float-和双精度-double" class="headerlink" title="浮点型单精度(float)和双精度(double)"></a>浮点型单精度(float)和双精度(double)</h4><p>​        1、单精度float通常以 F 或 f 结尾；包含小数形式：1.23f、2.34F、</p><p>​              指数形式(科学计数法)：2e15f(2 * $$10^{15}$$)、5.12E-2f（5.12 * $$10^{-2}$$)。</p><p>​        2、双精度double通常以 d 或 D 结尾；包含小数形式：1.23d、2.34D、</p><p>​              指数形式(科学计数法)：2e15d(2 * $$10^{15}$$)、5.12E-2D（5.12 * $$10^{-2}$$)。</p><p>​        3、浮点型在机器中存放形式：浮点数 = 符号位 + 指数位 + 尾数位</p><h4 id="布尔类型boolean"><a href="#布尔类型boolean" class="headerlink" title="布尔类型boolean"></a>布尔类型boolean</h4><p>​        1、boolean类型的值只能为true 、false 无null；</p><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a><strong>基本数据类型转换</strong></h2><p>​    <img src="https://gitee.com/yft66/picture/raw/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a><strong>强制类型转换</strong></h2><pre class=" language-java"><code class="language-java">Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Short<span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Byte<span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span> </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本数据类型&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    java语言有八大基本数据类型；&lt;/p&gt;
&lt;p&gt;​    &lt;co</summary>
      
    
    
    
    <category term="Java知识梳理" scheme="https://www.yifangtan.com/categories/Java%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
    
    <category term="Java" scheme="https://www.yifangtan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>空明随笔</title>
    <link href="https://www.yifangtan.com/posts/37712.html"/>
    <id>https://www.yifangtan.com/posts/37712.html</id>
    <published>2021-10-29T02:51:22.000Z</published>
    <updated>2021-10-30T02:45:52.680Z</updated>
    
    <content type="html"><![CDATA[<p>​        明天的T1打DK可能要替换S6四强赛成为LOL最精彩的BO５。</p><p>（B站比赛链接<a href="https://www.bilibili.com/video/BV1tz4y1f7Mz?from=search&amp;seid=17754967899062626995&amp;spm_id_from=333.337.0.0%EF%BC%89">https://www.bilibili.com/video/BV1tz4y1f7Mz?from=search&amp;seid=17754967899062626995&amp;spm_id_from=333.337.0.0）</a></p><p>​        当年最擅长进攻的ROX碰上了最擅长防守的SKT为观众们献上了一场视觉盛宴。而现在早已物是人非，T1依旧是Faker带领的。虽然现在的我不愿承认，但Faker确实是LOL第一人。不过以前我可是个壳吹，Faker的战绩倒背如流。只因我这个冠军粉看不上这几年T1成绩。自S7鸟巢被弑，近年来T1的状况差强人意。唯一一次进世界赛，进四强还是打的最弱的SPY欧洲蛇。我不相信这是三冠王T１的手笔，曾经爱之切，如今痛之深。这次，他们带四冠的目标向召唤师奖杯发起冲击。而他们的对手是卫冕冠军DK。是带着khan的DK。khan这个从S7以来次次换队进世界赛，次次没拿冠军的男人。这个队服上的冠军队伍才有的星星比李哥还多的男人。这次能否拿到属于自己的那颗呢？我想只有天知道了。</p><p>​        另一半区，另一半区，怎么说呢，一边是刚突破队史的EDG，一边是所谓的双冠王者GEN．G。其实我不认为GEN．G是双冠。道理很简单，哪怕算上三星蓝白，一个人都没有留下组成SSG。从SSG到GEN．G好歹有个Ruler。人都不一样了，只能算是继承了个队名。我和大校不一样，我很不喜欢GEN．G。最根本的原因可能就是S7了，粉碎了李哥的三连冠。（壳吹狂怒）再者就是，他是冒泡赛的KING。重建以来，只要是进世界赛都是从赛区冒泡赛打上来的。无一列外。</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/4f702c83fb989510.jpg"></p><p>　　后猪狗时代的EDG终于是突破了八强。不知厂子怎么想，十年饮冰，热血终凉。俱乐部用之尽锱铢，弃之如泥沙。猪狗的下场竟如此相像。说回我们赛区。不管是LOL游戏的生命力地下降，还是国家政策地约束。这可能是最后一两年了。</p><p>​        留给选手的时间不多了。真的是不多了。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        明天的T1打DK可能要替换S6四强赛成为LOL最精彩的BO５。&lt;/p&gt;
&lt;p&gt;（B站比赛链接&lt;a href=&quot;https://www.bilibili.com/video/BV1tz4y1f7Mz?from=search&amp;amp;seid=17754967</summary>
      
    
    
    
    <category term="空明心的情感小屋" scheme="https://www.yifangtan.com/categories/%E7%A9%BA%E6%98%8E%E5%BF%83%E7%9A%84%E6%83%85%E6%84%9F%E5%B0%8F%E5%B1%8B/"/>
    
    
    <category term="LOL" scheme="https://www.yifangtan.com/tags/LOL/"/>
    
  </entry>
  
  <entry>
    <title>守夜人誓词</title>
    <link href="https://www.yifangtan.com/posts/16193.html"/>
    <id>https://www.yifangtan.com/posts/16193.html</id>
    <published>2021-10-23T13:40:52.000Z</published>
    <updated>2021-10-30T02:45:52.677Z</updated>
    
    <content type="html"><![CDATA[<p>​    长夜将至，我从今开始守望，至死方休。我将不娶妻、不封地、不生子。我将不戴宝冠，不争荣宠。我将尽忠职守，生死於斯。我是黑暗中的利剑，长城上的守卫。我是抵御寒冷的烈焰，破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    长夜将至，我从今开始守望，至死方休。我将不娶妻、不封地、不生子。我将不戴宝冠，不争荣宠。我将尽忠职守，生死於斯。我是黑暗中的利剑，长城上的守卫。我是抵御寒冷的烈焰，破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.yifangtan.com/posts/16107.html"/>
    <id>https://www.yifangtan.com/posts/16107.html</id>
    <published>2021-10-23T12:59:47.799Z</published>
    <updated>2021-10-30T02:45:52.679Z</updated>
    
    <content type="html"><![CDATA[<p>​    欢迎来到一方潭个人博客网站</p><p>​    感谢你的浏览！</p><p>​    祝您生活愉快！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    欢迎来到一方潭个人博客网站&lt;/p&gt;
&lt;p&gt;​    感谢你的浏览！&lt;/p&gt;
&lt;p&gt;​    祝您生活愉快！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
